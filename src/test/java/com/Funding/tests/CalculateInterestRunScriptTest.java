package com.Funding.tests;

import java.io.IOException;

import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.Status;
import com.locators.allPages.FundingCalculateInterestPO;
import com.locators.allPages.SideMenuPO;
import com.qa.baseclass.Baseclass;
import com.qa.selenium.core.driver.IScreenAction;
import com.qa.selenium.core.element.IElementActions;
import com.qa.utils.FundingPage;
import com.qa.utils.LoginPage;
import com.qa.utils.Utils;

public class CalculateInterestRunScriptTest extends Baseclass {

	@Test(priority = 1)
	public void validateRunScriptWithAndWithoutDateSelection() throws IOException {
		try {
			extenttest = extent.createTest(
					"SelectedPastDate : Verify the data if the user does select a past date from the date dropdown"
							+ "-"
							+ "WithOutSelectingAnyDate : Verify that when the user clicks 'Run Script', when the most recent calculation has been completed it has the status DONE_SUCCESS")
					.assignCategory(fundingCalculateInterest_tag + "_" + env);
			node = extenttest.createNode("Report");

			// Call the loadLoginPage function from the utils login
			LoginPage.loadLoginPage();

			// Call the userLoginProcess function from the utils login
			LoginPage.userLoginProcess(node, driver, getDataFromExcel(1), getDataFromExcel(2));

			// Click on the administration
			Utils.clickOnMenu(node, driver, SideMenuPO.funding);

			// Click on the users
			Utils.clickOnMenu(node, driver, SideMenuPO.calculateInterest);

			// Check if the popup is present
			if (IElementActions.isElementPresent(driver, FundingCalculateInterestPO.errorPaymentModal)) {
				// If popup is present, click on the close button
				// Click on the RunScript
				IElementActions.clickelement_usingXpath(node, driver,
						FundingCalculateInterestPO.closeButtonErrorPaymentModal);
				node.log(Status.INFO, "SUB-STEP_0.001 : Clicked on the close button under error payment modal");
				System.out.println("SUB-STEP_0.001 : Clicked on the close button under error payment modal");

			}

			// Click on the run script button
			Utils.clickOnRunScriptButton();

			// Select a past date and click on the run script button
			FundingPage.selectPastDataAndClickRunScript();

			//
			Utils.refreshPagenTill(node, driver, 30, 2, FundingCalculateInterestPO.firstRecordStatus,
					FundingCalculateInterestPO.firstRecordStatusInProgress,
					FundingCalculateInterestPO.firstRecordStatusError);

			// Check the status
			String status = FundingPage.checkStatus(FundingCalculateInterestPO.firstRecordStatus,
					FundingCalculateInterestPO.firstRecordStatusInProgress,
					FundingCalculateInterestPO.firstRecordStatusError);

			node.log(Status.INFO, "STEP1 : " + status + " appears in status");
			System.out.println("STEP1 : " + status + " appears in status");

			// Verify the entry is added to the table
			IElementActions.assertContains_usingString(node, driver, status, "DONE_SUCCESS",
					"STEP2: BUG:  " + status + " is coming on the record generated by runscript",
					"STEP2 : EXPECTED: DONE_SUCCESS is coming on the record generated by runscript");

			String expectedPastDate = Utils.getYesterdayDateFormatted();
			// System.out.println("expectedPastDate" + expectedPastDate);
			expectedPastDate = Utils.convertDateFormat(expectedPastDate);
			// System.out.println("expectedPastDate " + expectedPastDate);

			String actualPastDate = IElementActions.getElementText_usingXpath(node, driver,
					FundingCalculateInterestPO.firstRecordSelectedDate);

			System.out.println(expectedPastDate.contains(actualPastDate));
			IElementActions.assertContains_usingString(node, driver, actualPastDate, expectedPastDate,
					"STEP3 : BUG: Select Date is not coming on Calculate Interest page",
					"STEP3 : EXPECTED: Select Date is coming on Calculate Interest page");

			String expectedTodayDate = Utils.getTodayDateFormatted();

			String actualLaunchDate = IElementActions.getElementText_usingXpath(node, driver,
					FundingCalculateInterestPO.firstRecordlaunchDate);
			System.out.println("actualLaunchDate " + actualLaunchDate);

			IElementActions.assertContains_usingString(node, driver, actualLaunchDate, expectedTodayDate,
					"STEP4 : BUG: Launch Date is not coming on Calculate Interest page",
					"STEP4 : EXPECTED:  Launch Date is coming on Calculate Interest page");

			String actualCustomDate = IElementActions.getElementText_usingXpath(node, driver,
					FundingCalculateInterestPO.firstRecordCustomDate);

			IElementActions.assertContains_usingString(node, driver, actualCustomDate, "YES",
					"STEP5 : BUG:  Custom Date is not coming on Calculate Interest page",
					"STEP5 : EXPECTED:  Custom Date is coming on Calculate Interest page");

			String actualScheduled = IElementActions.getElementText_usingXpath(node, driver,
					FundingCalculateInterestPO.firstRecordScheduled);

			IElementActions.assertContains_usingString(node, driver, actualScheduled, "MANUAL",
					"STEP6 : BUG: Scheduled is not coming on Calculate Interest page",
					"STEP6 : EXPECTED: Scheduled is coming on Calculate Interest page");

			// Verify the status
			String directRunScritStatus = FundingPage.checkStatus(FundingCalculateInterestPO.secondRecordStatus,
					FundingCalculateInterestPO.secondRecordStatusInProgress,
					FundingCalculateInterestPO.secondRecordStatusError);

			// Verify the entry is added to the table
			IElementActions.assertContains_usingString(node, driver, directRunScritStatus, "DONE_SUCCESS",
					"STEP7 : BUG: DONE_SUCCESS is not coming for directly running 'Run Script' without selecting a date",
					"STEP7 : EXPECTED: DONE_SUCCESS is coming for directly running 'Run Script' without selecting a date ");

			// Take Screenshot
			IScreenAction.captureScreenShot_PassCase("validateRunScriptWithAndWithoutDateSelection", "Pass", driver);

		} catch (AssertionError validateRunScriptWithAndWithoutDateSelection) {

			node.log(Status.INFO,
					"EXCEPTION BLOCK 1 : FAIL : Some Assertion Error Caught In validateRunScriptWithAndWithoutDateSelection test in CalculateInterestRunScriptTest class");

			// Take the failed case screenshot
			String screenpath = IScreenAction.captureScreenShot_FailedCase(driver,
					"validateRunScriptWithAndWithoutDateSelection_Fail");
			node.log(Status.FAIL, "Some Assertion Error" + extenttest.addScreenCaptureFromPath(screenpath));

			validateRunScriptWithAndWithoutDateSelection.printStackTrace();
			node.fail(validateRunScriptWithAndWithoutDateSelection);
			Assert.fail();
			extent.flush();

		} catch (Exception validateRunScriptWithAndWithoutDateSelection) {
			node.log(Status.INFO,
					"EXCEPTION BLOCK 2 : FAIL : Some Exception Error Caught In validateRunScriptWithAndWithoutDateSelection test in CalculateInterestRunScriptTest class");

			// Take the failed case screenshot
			String screenpath = IScreenAction.captureScreenShot_FailedCase(driver,
					"validateRunScriptWithAndWithoutDateSelection_Fail");
			node.log(Status.FAIL, "Some Exception Error" + extenttest.addScreenCaptureFromPath(screenpath));

			validateRunScriptWithAndWithoutDateSelection.printStackTrace();
			node.fail(validateRunScriptWithAndWithoutDateSelection);
			Assert.fail();
			extent.flush();
		}
	}

	@Test(priority = 2)
	public void validateLaunchDateSortingAfterScriptRun() throws IOException {
		try {
			extenttest = extent.createTest(
					"Verify that the rows of the table should instead be sorted by Launch Date in reverse chronological order, so the most recently run script is shown in the first row of the table")
					.assignCategory(fundingCalculateInterest_tag + "_" + env);
			node = extenttest.createNode("Report");

			// Call the loadCalculateInterestPage function from the FundingPage
			FundingPage.loadCalculateInterestPage();

			// Verify the sorting in lauch date
			node.log(Status.INFO, "STEP1 : Verify the sorting order");
			System.out.println("STEP1 : Verify the sorting order");

			Utils.validateDateSorting(node, driver, FundingCalculateInterestPO.launchDateValues, "descending",
					"validateLaunchDateSortingAfterScriptRun", "dd/MM/yyyy HH:mm", "LocalDateTime");

		} catch (AssertionError validateLaunchDateSortingAfterScriptRun) {

			node.log(Status.INFO,
					"EXCEPTION BLOCK 1 : FAIL : Some Assertion Error Caught In validateLaunchDateSortingAfterScriptRun test in CalculateInterestRunScriptTest class");

			// Take the failed case screenshot
			String screenpath = IScreenAction.captureScreenShot_FailedCase(driver,
					"validateLaunchDateSortingAfterScriptRun_Fail");
			node.log(Status.FAIL, "Some Assertion Error" + extenttest.addScreenCaptureFromPath(screenpath));

			validateLaunchDateSortingAfterScriptRun.printStackTrace();
			node.fail(validateLaunchDateSortingAfterScriptRun);
			Assert.fail();
			extent.flush();

		} catch (Exception validateLaunchDateSortingAfterScriptRun) {
			node.log(Status.INFO,
					"EXCEPTION BLOCK 2 : FAIL : Some Exception Error Caught In validateLaunchDateSortingAfterScriptRun test in CalculateInterestRunScriptTest class");

			// Take the failed case screenshot
			String screenpath = IScreenAction.captureScreenShot_FailedCase(driver,
					"validateLaunchDateSortingAfterScriptRun_Fail");
			node.log(Status.FAIL, "Some Exception Error" + extenttest.addScreenCaptureFromPath(screenpath));

			validateLaunchDateSortingAfterScriptRun.printStackTrace();
			node.fail(validateLaunchDateSortingAfterScriptRun);
			Assert.fail();
			extent.flush();
		}
	}

}
